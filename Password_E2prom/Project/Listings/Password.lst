C51 COMPILER V9.56.0.0   PASSWORD                                                          03/22/2022 21:42:47 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PASSWORD
OBJECT MODULE PLACED IN .\Objects\Password.obj
COMPILER INVOKED BY: E:\keil5\keil5\C51\BIN\C51.EXE ..\Driver\Password.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE I
                    -NCDIR(..\Include;..\Driver;..\System) DEBUG OBJECTEXTEND PRINT(.\Listings\Password.lst) TABS(2) OBJECT(.\Objects\Passwor
                    -d.obj)

line level    source

   1          #include <Password.h>
   2          
   3          
   4            unsigned char cntBuf;
   5            unsigned char pdata PasswordBuf[MAX_LEN];
   6            
   7            unsigned char pdata Password_dat1[MAX_LEN];
   8            
   9            unsigned char pdata Password_Read[MAX_LEN];
  10          
  11          
  12          
  13          void Key_Number(unsigned char keycode)
  14          {
  15   1        switch(state)
  16   1        {
  17   2          case 3:
  18   2            break;
  19   2          case 4:
  20   2            break;
  21   2          default:
  22   2            Enter_Init();
  23   2            if(cntBuf < MAX_LEN)
  24   2            {
  25   3              PasswordBuf[cntBuf++] = keycode;
  26   3              Show_PSWcnt();
  27   3            }
  28   2            else
  29   2            {
  30   3              Fill_Number(PasswordBuf,'\0',MAX_LEN);
  31   3              LcdShowStr(0,0,"Password Error  ");
  32   3              LcdShowStr(0,1,"too long ");
  33   3              delay_01(1500);
  34   3              Enter_Init();
  35   3              cntBuf = 0;
  36   3            }
  37   2          break;
  38   2        }
  39   1      }
  40          
  41          
  42          void Key_Enter()
  43          {
  44   1        
  45   1          switch(state)
  46   1          {
  47   2            case 0://输入密码正确，进入解锁状态 
  48   2            if(CmpMemory(PasswordBuf,Password_Read,sizeof(Password_dat1)))
  49   2            {
  50   3              LcdShowStr(0,0,"Password Correct  ");
  51   3              LcdShowStr(0,1,"Unlocked Now      "); 
  52   3              delay_01(1000);
  53   3              LcdWriteCmd(0x01); //清屏
C51 COMPILER V9.56.0.0   PASSWORD                                                          03/22/2022 21:42:47 PAGE 2   

  54   3              state = 3;  //进入解锁状态
  55   3            }
  56   2            else   //输入密码错误，若输入次数超过5次，进入锁定状态，输入次数重置
  57   2            {
  58   3              LcdShowStr(0,0,"Password Error    ");
  59   3              LcdShowStr(0,1,"Try again         ");
  60   3              delay_01(1000);
  61   3              LcdWriteCmd(0x01); //清屏       
  62   3              EnterCnt++;
  63   3              if(EnterCnt > 5)
  64   3              {       
  65   4                state = 4;
  66   4                EnterCnt = 0;
  67   4              }
  68   3            }
  69   2              cntBuf = 0; 
  70   2              Enter_Init();
  71   2              Fill_Number(PasswordBuf,'\0',MAX_LEN);
  72   2            break;
  73   2      /////////////////////////////////////////////////////////////////////         
  74   2              /*按键设置密码状态*/        
  75   2            case 1:
  76   2              Fill_Number(Password_dat1,'\0',MAX_LEN);
  77   2              Copy_Number(Password_dat1,PasswordBuf,sizeof(PasswordBuf));
  78   2              Fill_Number(PasswordBuf,'\0',MAX_LEN);
  79   2              state = 2;
  80   2              LcdShowStr(0,0,"Enter again     ");
  81   2              LcdShowStr(0,1,"                ");
  82   2              cntBuf = 0;
  83   2            break;
  84   2      ///////////////////////////////////////////////////////////////////////////////
  85   2              /*重复输入密码，确认为相同后保存密码并进入开锁程序，若不同则重新设置*/  
  86   2            case 2:         
  87   2              if(CmpMemory(Password_dat1,PasswordBuf,sizeof(Password_dat1)))
  88   2              {
  89   3                Save_Password();
  90   3                Read_Password();
  91   3                LcdShowStr(0,0,"Successful   ");
  92   3                LcdShowStr(0,1,"Locked Now   ");
  93   3                state = 0;
  94   3              }
  95   2              else
  96   2              {
  97   3                LcdShowStr(0,0,"Password atypism ");
  98   3                LcdShowStr(0,1,"Please Reset    ");   
  99   3                state = 1;
 100   3              }
 101   2                cntBuf = 0;       
 102   2                delay_01(1500);
 103   2                LcdWriteCmd(0x01); //清屏   
 104   2                Enter_Init();
 105   2                Fill_Number(Password_dat1,'\0',MAX_LEN);
 106   2                Fill_Number(PasswordBuf,'\0',MAX_LEN);
 107   2            break;
 108   2      ///////////////////////////////////////////////////////////////////////////     
 109   2              /*重新设置密码*/
 110   2            case 3:
 111   2              LcdShowStr(0,0,"Reset Password   ");
 112   2              LcdShowStr(0,1,"                 ");
 113   2              delay_01(1500);
 114   2              LcdWriteCmd(0x01); //清屏 
 115   2              Fill_Number(PasswordBuf,'\0',MAX_LEN);
C51 COMPILER V9.56.0.0   PASSWORD                                                          03/22/2022 21:42:47 PAGE 3   

 116   2              cntBuf = 0;     
 117   2              state = 1;  
 118   2              Enter_Init();
 119   2            break;
 120   2      ///////////////////////////////////////////////////////////////////////////
 121   2              /*锁定状态按下回车键发出警报，进入重新设置密码程序*/
 122   2            case 4:
 123   2              LcdShowStr(0,0,"WARNING  ");
 124   2              LcdShowStr(0,1,"It's Locked ");
 125   2              Buzz_Warning();     
 126   2              LcdWriteCmd(0x01); //清屏 
 127   2              LcdShowStr(0,0,"Press Enter  ");
 128   2              LcdShowStr(0,1,"Reset Password  ");     
 129   2              state = 3;
 130   2              
 131   2            break;    
 132   2          }
 133   1        
 134   1        
 135   1      }
 136          
 137          
 138          void Key_Esc()
 139          {
 140   1      
 141   1        Enter_Init();
 142   1        Fill_Number(PasswordBuf,'\0',MAX_LEN);
 143   1        cntBuf = 0;
 144   1           
 145   1      }
 146          
 147          
 148          void Show_PSWcnt()
 149          {
 150   1        unsigned char PSWcntbuf[MAX_LEN+1];
 151   1      
 152   1          Copy_Number(PSWcntbuf,PasswordBuf,MAX_LEN);
 153   1          Fill_Number(PSWcntbuf+cntBuf,'\0',sizeof(PSWcntbuf)-cntBuf);
 154   1          LcdShowStr(0,1,PSWcntbuf);
 155   1      }
 156          
 157          
 158          
 159          void Copy_Number(unsigned char *out,unsigned char *in,unsigned char len)
 160          {
 161   1        while(len--)
 162   1        {
 163   2          *out++ = *in++;
 164   2        }
 165   1      }
 166          
 167          void Fill_Number(unsigned char *dat,unsigned char byt,unsigned char len)
 168          {
 169   1        while(len--)
 170   1        {
 171   2          *dat++ = byt++;
 172   2        }
 173   1      }
 174          
 175          /* 将密码数组按位累加得到结果作为校验位 */
 176          unsigned char PSW_Check(unsigned char *dat,unsigned char len)
 177          {
C51 COMPILER V9.56.0.0   PASSWORD                                                          03/22/2022 21:42:47 PAGE 4   

 178   1        unsigned char sum = 0;
 179   1        
 180   1        while(len--)
 181   1        {
 182   2          sum += *dat++;
 183   2        }
 184   1        return sum;
 185   1      }
 186          
 187          /*读取密码并与之前保存的密码最后一位进行校验*/
 188          bit Read_Password()
 189          {
 190   1        unsigned char savebuf2[MAX_LEN+1];
 191   1        unsigned char sum;
 192   1        
 193   1        E2Read(savebuf2,SAVE_ADDR,MAX_LEN+1);
 194   1        sum = PSW_Check(savebuf2,MAX_LEN);
 195   1        if(savebuf2[MAX_LEN] == ~sum)
 196   1        {
 197   2          Copy_Number(Password_Read,savebuf2,MAX_LEN);
 198   2          return 1;
 199   2        }
 200   1        else
 201   1        {
 202   2          Fill_Number(Password_Read,'\0',MAX_LEN);
 203   2          return 0;
 204   2        }
 205   1      }
 206          
 207          
 208          /*将输入的密码最后一位添加校验位后保存在EEPROM中*/
 209          void Save_Password()
 210          {
 211   1        unsigned char savebuf1[MAX_LEN+1];
 212   1      
 213   1        Copy_Number(savebuf1,Password_dat1,MAX_LEN);
 214   1        savebuf1[MAX_LEN] = ~PSW_Check(savebuf1,MAX_LEN);
 215   1        E2Write(savebuf1,SAVE_ADDR,MAX_LEN+1);
 216   1      }
 217          
 218          
 219          
 220          
 221          bit CmpMemory(unsigned char *ptr1, unsigned char *ptr2, unsigned char len)
 222          {
 223   1          while (len--)
 224   1          {
 225   2              if (*ptr1++ != *ptr2++)  //遇到不相等数据时即刻返回0
 226   2              {
 227   3                  return 0;
 228   3              }
 229   2          }
 230   1          return 1;  //比较完全部长度数据都相等则返回1
 231   1      }
 232          ///* 将一字符串整理成16字节的固定长度字符串，不足部分补空格
 233          //   out-整理后的字符串输出指针，in-待整理字符串指针 */
 234          //void TrimString16(unsigned char *out, unsigned char *in)
 235          //{
 236          //    unsigned char i = 0;
 237          //    
 238          //    while (*in != '\0')  //拷贝字符串直到输入字符串结束
 239          //    {
C51 COMPILER V9.56.0.0   PASSWORD                                                          03/22/2022 21:42:47 PAGE 5   

 240          //        *out++ = *in++;
 241          //        i++;
 242          //        if (i >= 16)    //当拷贝长度已达到16字节时，强制跳出循环
 243          //        {
 244          //            break;
 245          //        }
 246          //    }
 247          //    for ( ; i<16; i++)  //如不足16个字节则用空格补齐
 248          //    {
 249          //        *out++ = ' ';
 250          //    }
 251          //    *out = '\0';        //最后添加结束符
 252          //}
 253          
 254          
 255          
 256          
 257          void KeyAction(unsigned char keycode)     //按键动作函数，keycode为按键键码
 258          { 
 259   1        if((keycode >= 0x30) && (keycode <= 0x39))
 260   1        {
 261   2          OpenBuzz(NoteFrequ[keycode-0x30]);
 262   2          delay_02(10);
 263   2          StopBuzz();
 264   2          
 265   2          Key_Number(keycode);
 266   2        }
 267   1      
 268   1        else if(keycode == 0x0D)    //回车键 发送数据
 269   1        {
 270   2          OpenBuzz(2768);
 271   2          delay_02(10);
 272   2          StopBuzz();       
 273   2          
 274   2          Key_Enter();    
 275   2        }
 276   1        else if(keycode == 0x1B)    //Esc键清零
 277   1        {
 278   2          OpenBuzz(2349);
 279   2          delay_02(10);
 280   2          StopBuzz();       
 281   2          
 282   2          Key_Esc();
 283   2        }
 284   1      }
 285          
 286          
 287          
 288          
 289          
 290          
 291          
 292          
 293          
 294          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1131    ----
   CONSTANT SIZE    =    290    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     49      75
C51 COMPILER V9.56.0.0   PASSWORD                                                          03/22/2022 21:42:47 PAGE 6   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
