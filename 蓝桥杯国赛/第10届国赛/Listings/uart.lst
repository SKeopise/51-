C51 COMPILER V9.60.0.0   UART                                                              06/01/2023 22:28:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: E:\keil5\keil5\C51\BIN\C51.EXE System\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Driver;.\Syst
                    -em;.\Config) DEBUG OBJECTEXTEND PRINT(.\Listings\uart.lst) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3          
   4          unsigned char Uart_StringBuf[10];
   5          
   6          unsigned char Send_StringBuf[15];
   7          
   8          unsigned char Uart_ReadCnt = 0;
   9          
  10          bit flag_StringError = 0;
  11          
  12          bit flag_ReadRight = 0;
  13          
  14          bit flag_ReadEnd = 0;
  15          
  16          
  17          
  18          void UartInit()         //4800bps@12.000MHz
  19          {
  20   1              SCON = 0x50;            //8位数据,可变波特率
  21   1              AUXR |= 0x40;           //定时器时钟1T模式
  22   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
  23   1              TMOD &= 0x0F;           //设置定时器模式
  24   1              TL1 = 0x8F;             //设置定时初始值
  25   1              TH1 = 0xFD;             //设置定时初始值
  26   1              ET1 = 0;                //禁止定时器%d中断
  27   1              TR1 = 1;                //定时器1开始计时
  28   1              
  29   1              ES = 1;
  30   1              EA = 1;
  31   1      }
  32          
  33          
  34          void Uart1Int() interrupt 4
  35          {
  36   1              if(RI == 1)
  37   1              {
  38   2                      RI = 0;
  39   2                      if(Uart_ReadCnt < 10)
  40   2                      {
  41   3                              Uart_StringBuf[Uart_ReadCnt++] = SBUF;
  42   3                      }
  43   2              }
  44   1              
  45   1              if(TI == 1)
  46   1              {
  47   2                      TI = 0;
  48   2              }
  49   1      }
  50          
  51          void UartDriver()
  52          {
  53   1              float Data_Buf = 0;
  54   1              unsigned int Int_Buf = 0;
C51 COMPILER V9.60.0.0   UART                                                              06/01/2023 22:28:24 PAGE 2   

  55   1              
  56   1              if(flag_ReadEnd == 1)
  57   1              {
  58   2                      if(Uart_StringBuf[0] == 'S')
  59   2                      {
  60   3                              StringCmp(Uart_StringBuf,"ST\r\n");
  61   3                              if(flag_ReadRight == 1)
  62   3                              {
  63   4                                      flag_ReadRight = 0;
  64   4                                      Data_Buf = Temp_Data;
  65   4                                      Data_Buf /= 100;
  66   4                                      sprintf(Send_StringBuf,"$%2d,%2.2f\r\n",Sonic_Distence,Data_Buf);
  67   4                                      UartSendString(Send_StringBuf);
  68   4                              }
  69   3                              if(flag_StringError == 1)
  70   3                              {
  71   4                                      flag_StringError = 0;
  72   4                                      UartSendString("ERROR\r\n");
  73   4                              }
  74   3                      }
  75   2                      else if(Uart_StringBuf[0] == 'P')
  76   2                      {
  77   3                              StringCmp(Uart_StringBuf,"PARA\r\n");
  78   3                              if(flag_ReadRight == 1)
  79   3                              {
  80   4                                      flag_ReadRight = 0;
  81   4                                      Int_Buf = ParmData_Temp;
  82   4                                      Int_Buf /= 100;
  83   4                                      sprintf(Send_StringBuf,"$%2d,%2d\r\n",ParmData_Distence,Int_Buf);
  84   4                                      UartSendString(Send_StringBuf);
  85   4                              }
  86   3                              if(flag_StringError == 1)
  87   3                              {
  88   4                                      flag_StringError = 0;
  89   4                                      UartSendString("ERROR\r\n");
  90   4                              }               
  91   3                      }
  92   2                      else
  93   2                      {
  94   3                              UartSendString("ERROR\r\n");
  95   3                      }
  96   2                      StringClear(Uart_StringBuf,10);
  97   2                      flag_ReadEnd = 0;
  98   2                      Uart_ReadCnt = 0;
  99   2              }
 100   1      }
 101          
 102          void UartReadTimerMonitor(unsigned char ms)
 103          {
 104   1              static unsigned char ReadCnt_Buf = 0;
 105   1              static unsigned char ReadTimer = 0;
 106   1              
 107   1              if(Uart_ReadCnt > 0)
 108   1              {
 109   2                      if(ReadCnt_Buf != Uart_ReadCnt)
 110   2                      {
 111   3                              ReadCnt_Buf = Uart_ReadCnt;
 112   3                              ReadTimer = 0;
 113   3                      }
 114   2                      else
 115   2                      {
 116   3                              if(ReadTimer < 30)
C51 COMPILER V9.60.0.0   UART                                                              06/01/2023 22:28:24 PAGE 3   

 117   3                              {
 118   4                                      ReadTimer += ms;
 119   4                                      if(ReadTimer >= 30)
 120   4                                      {
 121   5                                              ReadTimer = 0;
 122   5                                              flag_ReadEnd = 1;
 123   5                                      }
 124   4                              }
 125   3                      }
 126   2              }
 127   1              else
 128   1              {
 129   2                      ReadCnt_Buf = 0;
 130   2              }
 131   1              
 132   1      }
 133          
 134          
 135          void UartSendByte(unsigned char dat)
 136          {
 137   1              SBUF = dat;
 138   1              while(TI == 0);
 139   1              TI = 0;
 140   1      }
 141          
 142          void UartSendString(unsigned char *str)
 143          {
 144   1              while(*str != '\0')
 145   1              {
 146   2                      UartSendByte(*str++);
 147   2              }
 148   1      }
 149          
 150          
 151          void StringCmp(unsigned char *str1,unsigned char *str2)
 152          {
 153   1              while((*str1 != '\0') && (*str2 != '\0'))
 154   1              {
 155   2                      if(*str1 != *str2)
 156   2                      {
 157   3                              flag_StringError = 1;
 158   3                              break;
 159   3                      }
 160   2                      str1++;
 161   2                      str2++;
 162   2              }
 163   1              if((*str1 == '\0') && (*str2 == '\0'))
 164   1              {
 165   2                      flag_ReadRight = 1;
 166   2              }
 167   1              else
 168   1              {
 169   2                      flag_StringError = 1;
 170   2              }
 171   1              
 172   1      }
 173          
 174          
 175          void StringClear(unsigned char *str,unsigned char len)
 176          {
 177   1              while(len--)
 178   1              {
C51 COMPILER V9.60.0.0   UART                                                              06/01/2023 22:28:24 PAGE 4   

 179   2                      *str = '\0';
 180   2                      str++;
 181   2              }       
 182   1      }
 183          
 184          
 185          
 186          
 187          
 188          
 189          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    531    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
